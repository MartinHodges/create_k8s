---

- hosts: gw
  become: yes
  pre_tasks:

  - name: install updates (Ubuntu)
    tags: always
    apt:
      upgrade: dist
      update_cache: yes
    when: ansible_distribution == "Ubuntu"

  - name: Install nginx
    package: name=nginx state=present force=yes install_recommends=no


  - name: has CUSTOM DOMAIN.crt already been uploaded?
    stat:
      path: /etc/ssl/{{ custom_domain }}.crt
    register: custom_crt

  - name: Wait for signed cert
    tags: always
    pause:
      prompt: 'Create {{ custom_domain }}.crt on your local home directory and press enter'
    when: custom_crt.stat.exists == false

  - name: Save CRT to remote
    tags: always
    copy:
      src: ~/{{ custom_domain }}.crt
      dest: /etc/ssl/{{ custom_domain }}.crt
    when: custom_crt.stat.exists == false


  - name: has CUSTOM DOMAIN.key already been uploaded?
    stat:
      path: /etc/ssl/{{ custom_domain }}.key
    register: custom_key

  - name: Wait for key
    tags: always
    pause:
      prompt: 'Create {{ custom_domain }}.key on your local home directory and press enter'
    when: custom_key.stat.exists == false

  - name: Save KEY to remote
    tags: always
    copy:
      src: ~/{{ custom_domain }}.key
      dest: /etc/ssl/{{ custom_domain }}.key
    when: custom_key.stat.exists == false

  - name: generate CUSTOM_DOMAIN nginx sites-available file from template
    tags: always
    vars:
      k8s_master: "{{ groups['k8s_master'][0] }}"
      k8s_node_1: "{{ groups['k8s_node'][0] }}"
      k8s_node_2: "{{ groups['k8s_node'][1] }}"
      domain: "{{ custom_domain }}"
    template:
      src: "nginx-apisix-config.j2"
      dest: /etc/nginx/sites-available/{{ custom_domain }}
      owner: root
      group: root
      mode: 0644
    notify: restart_nginx

  - name: link to sites-enabled
    tags: always
    file:
      src: /etc/nginx/sites-available/{{ custom_domain }}
      dest: /etc/nginx/sites-enabled/{{ custom_domain }}
      state: link
    notify: restart_nginx

  - name: Install ufw firewall
    package: name=ufw state=present force=yes install_recommends=no

  - name: update sysctl
    tags: always
    sysctl:
      name: net.ipv4.ip_forward
      value: '1'
      sysctl_set: true
      state: present
      reload: true

  - name: change forward policy
    lineinfile:
      path: /etc/default/ufw
      regexp: '^DEFAULT_FORWARD_POLICY="DROP"'
      line: 'DEFAULT_FORWARD_POLICY="ACCEPT"'
      backrefs: yes
    notify:
      - restart_ufw

  - name: allow SSH through the firewall
    tags: always
    ufw:
      rule: allow
      name: OpenSSH
    notify:
      - restart_ufw

  - name: allow HTTP through the firewall
    tags: always
    ufw:
      rule: allow
      port: '80'
      from: '0.0.0.0/0'
      to: 'any'
      protocol: tcp
    notify:
      - restart_ufw

  - name: allow HTTPS outgoing through the firewall
    tags: always
    ufw:
      rule: allow
      port: '443'
      from: '0.0.0.0/0'
      to: 'any'
      protocol: tcp
    notify:
      - restart_ufw

  - name: add NAT to ufw
    blockinfile:
      path: /etc/ufw/before.rules
      block: |
        # NAT table rules
        *nat
        :POSTROUTING ACCEPT [0:0]

        # Forward traffic through eth0
        # Change to match your out-interface and local network
        -A POSTROUTING -s 10.240.0.0/16 -o eth0 -j MASQUERADE
        # don't delete the 'COMMIT' line or these nat table rules won't be processed
        COMMIT

      insertbefore: "^# Don't delete these required lines"
    notify:
      - restart_ufw

  - name: configure openVPN
    tags: always
    become: yes
    copy:
      src: network.conf
      dest: /etc/netplan/55-local.yaml
      owner: root
      group: root
      mode: 0440
  
  - name: Apply netplan
    tags: always
    become: yes
    command: netplan apply

  handlers:
    - name: restart_ufw
      ufw:
        state: enabled
    - name: restart_nginx
      service:
        name: nginx
        state: restarted
